/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import { z } from 'zod';

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: Common Conversation Attributes
 *   version: not applicable
 */

/**
 * A string that is not empty and does not contain only whitespace
 */
export type NonEmptyString = z.infer<typeof NonEmptyString>;
export const NonEmptyString = z
  .string()
  .min(1)
  .regex(/^(?! *$).+$/);

/**
 * A universally unique identifier
 */
export type UUID = z.infer<typeof UUID>;
export const UUID = z.string().uuid();

/**
 * Could be any string, not necessarily a UUID
 */
export type User = z.infer<typeof User>;
export const User = z.object({
  /**
   * User id.
   */
  id: z.string().optional(),
  /**
   * User name.
   */
  name: z.string().optional(),
});

/**
 * Could be any string, not necessarily a UUID
 */
export type MessagePresentation = z.infer<typeof MessagePresentation>;
export const MessagePresentation = z.object({
  /**
   * Could be any string, not necessarily a UUID
   */
  delay: z.number().int().optional(),
  /**
   * Could be any string, not necessarily a UUID
   */
  stream: z.boolean().optional(),
});

/**
 * trace Data
 */
export type TraceData = z.infer<typeof TraceData>;
export const TraceData = z.object({
  /**
   * Could be any string, not necessarily a UUID
   */
  transactionId: z.string().optional(),
  /**
   * Could be any string, not necessarily a UUID
   */
  traceId: z.string().optional(),
});

export type Replacement = z.infer<typeof Replacement>;
export const Replacement = z.object({}).catchall(z.unknown());

export type Reader = z.infer<typeof Reader>;
export const Reader = z.object({}).catchall(z.unknown());

/**
 * Provider
 */
export type Provider = z.infer<typeof Provider>;
export const Provider = z.enum(['OpenAI', 'Azure OpenAI']);
export type ProviderEnum = typeof Provider.enum;
export const ProviderEnum = Provider.enum;

/**
 * Message role.
 */
export type MessageRole = z.infer<typeof MessageRole>;
export const MessageRole = z.enum(['system', 'user', 'assistant']);
export type MessageRoleEnum = typeof MessageRole.enum;
export const MessageRoleEnum = MessageRole.enum;

/**
 * AI assistant conversation message.
 */
export type Message = z.infer<typeof Message>;
export const Message = z.object({
  /**
   * Message content.
   */
  content: z.string(),
  /**
   * Message content.
   */
  reader: Reader.optional(),
  replacements: Replacement.optional(),
  /**
   * Message role.
   */
  role: MessageRole,
  /**
   * The timestamp message was sent or received.
   */
  timestamp: NonEmptyString,
  /**
   * Is error message.
   */
  isError: z.boolean().optional(),
  /**
   * ID of the exception container
   */
  presentation: MessagePresentation.optional(),
  /**
   * trace Data
   */
  traceData: TraceData.optional(),
});

export type ApiConfig = z.infer<typeof ApiConfig>;
export const ApiConfig = z.object({
  /**
   * connector Id
   */
  connectorId: z.string().optional(),
  /**
   * connector Type Title
   */
  connectorTypeTitle: z.string().optional(),
  /**
   * defaultSystemPromptId
   */
  defaultSystemPromptId: z.string().optional(),
  /**
   * Provider
   */
  provider: Provider.optional(),
  /**
   * model
   */
  model: z.string().optional(),
});

export type ErrorSchema = z.infer<typeof ErrorSchema>;
export const ErrorSchema = z
  .object({
    id: UUID.optional(),
    error: z.object({
      status_code: z.number().int().min(400),
      message: z.string(),
    }),
  })
  .strict();

export type ConversationResponse = z.infer<typeof ConversationResponse>;
export const ConversationResponse = z.object({
  id: z.union([UUID, NonEmptyString]),
  /**
   * The conversation title.
   */
  title: z.string(),
  timestamp: NonEmptyString.optional(),
  /**
   * The last time conversation was updated.
   */
  updatedAt: z.string().optional(),
  /**
   * The last time conversation was updated.
   */
  createdAt: z.string(),
  replacements: Replacement.optional(),
  user: User,
  /**
   * The conversation messages.
   */
  messages: z.array(Message).optional(),
  /**
   * LLM API configuration.
   */
  apiConfig: ApiConfig,
  /**
   * Is default conversation.
   */
  isDefault: z.boolean().optional(),
  /**
   * excludeFromLastConversationStorage.
   */
  excludeFromLastConversationStorage: z.boolean().optional(),
  /**
   * Kibana space
   */
  namespace: z.string(),
});

export type ConversationUpdateProps = z.infer<typeof ConversationUpdateProps>;
export const ConversationUpdateProps = z.object({
  id: z.union([UUID, NonEmptyString]),
  /**
   * The conversation title.
   */
  title: z.string().optional(),
  /**
   * The conversation messages.
   */
  messages: z.array(Message).optional(),
  /**
   * LLM API configuration.
   */
  apiConfig: ApiConfig.optional(),
  /**
   * excludeFromLastConversationStorage.
   */
  excludeFromLastConversationStorage: z.boolean().optional(),
  replacements: Replacement.optional(),
});

export type ConversationCreateProps = z.infer<typeof ConversationCreateProps>;
export const ConversationCreateProps = z.object({
  /**
   * The conversation title.
   */
  title: z.string(),
  /**
   * The conversation messages.
   */
  messages: z.array(Message).optional(),
  /**
   * LLM API configuration.
   */
  apiConfig: ApiConfig.optional(),
  /**
   * Is default conversation.
   */
  isDefault: z.boolean().optional(),
  /**
   * excludeFromLastConversationStorage.
   */
  excludeFromLastConversationStorage: z.boolean().optional(),
  replacements: Replacement.optional(),
});

export type ConversationMessageCreateProps = z.infer<typeof ConversationMessageCreateProps>;
export const ConversationMessageCreateProps = z.object({
  /**
   * The conversation messages.
   */
  messages: z.array(Message),
});
